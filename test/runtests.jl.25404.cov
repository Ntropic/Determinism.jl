        - using Test
        - using Determinism
        - using Base.Threads
        - using Random
        - 
        - @testset "Determinism.jl Tests" begin
        -     @testset "Reproducibility Test 1" begin
        -         result1 = @determinism rng 42 begin
        -             rand(rng, 10, 10)
        -         end
        - 
        -         result2 = @determinism rng2 42 begin
        -             rand(rng2, 10, 10)
        -         end
        -         @test result1 == result2  # Ensure results are identical
        -     end
        - 
        -     @testset "Reproducibility Test 2" begin        
        -         result1 = @determinism rng 42 begin
        -             x1 = zeros(10, 10)
        -             for i in 1:10
        -                 for j in 1:10
        -                     x1[i, j] = rand()
        -                 end
        -             end
        -             x1
        -         end
        - 
        -         result2 = @determinism rng2 42 begin
        -             x2 = zeros(10, 10)
        -             for i in 1:10
        -                 for j in 1:10
        -                     x2[i, j] = rand()
        -                 end
        -             end
        -             x2
        -         end
        -         @test result1 == result2  # Ensure results are identical
        -     end
        - 
        -     @testset "Reproducibility Test 3" begin        
        -         result1 = @determinism rng 42 begin
        -             x1 = zeros(10, 10)
        -             for i in 1:10
        -                 for j in 1:10
        -                     x1[i, j] = rand()
        -                 end
        -             end
        -             x1
        -         end
        - 
        -         result2 = @determinism rng 42 begin
        -             x2 = zeros(10, 10)
        -             for i in 1:10
        -                 for j in 1:10
        -                     x2[i, j] = rand()
        -                 end
        -             end
        -             x2
        -         end
        -         @test result1 != result2  # Ensure results are identical
        -     end
        - 
        -     @testset "Reference Code Test 1" begin
        1         function determinism_function()
        1             @determinism rnger1 42 begin
        1                 x1_ = rand(rnger1, 10, 10)
        1                 Threads.@threads for i in 1:4
        -                     x1_[:, i] .+= rand(10)
        -                 end
        1                 return x1_
        -             end
        -         end
        - 
        1         function manual_function()
        1             rng = MersenneTwister(42)
        1             x2_ = rand(rng, 10, 10)
        1             Threads.@threads for i in 1:4
        4                 rng_local = MersenneTwister(hash((i,))+42)
        4                 x2_[:, i] .+= rand(rng_local, 10)
        0             end
        1             return x2_
        -         end
        - 
        -         result_determinism = determinism_function()
        -         result_manual = manual_function()
        -         @test result_determinism == result_manual  # Compare results
        -     end
        - 
        -     @testset "Equivalence Test: Nested loops with threading" begin
        1         function nested_determinism_function()
        1             @determinism begin
       16                 x = zeros(4, 4)
        1                 Threads.@threads for i in 1:4
        -                     Threads.@threads for j in 1:4
        -                         x[i, j] = randexp()
        -                     end
        -                 end
        1                 return x
        -             end
        -         end
        - 
        1         function nested_manual_function()
       16             x = zeros(4, 4)
        1             for i in 1:4
        4                 Threads.@threads for i in 1:4
       16                     Threads.@threads for j in 1:4
       64                         rng_local = MersenneTwister(hash((i,j,)))
       64                         x[i, j] = randexp(rng_local)
        0                     end
        0                 end
        7             end
        1             return x
        -         end
        - 
        -         result_determinism = nested_determinism_function()
        -         result_manual = nested_manual_function()
        -         @test result_determinism == result_manual  # Compare results
        -     end
        - 
        - end
